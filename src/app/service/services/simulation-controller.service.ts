/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { calculerTeg } from '../fn/simulation-controller/calculer-teg';
import { CalculerTeg$Params } from '../fn/simulation-controller/calculer-teg';
import { listeSimulationCategorie } from '../fn/simulation-controller/liste-simulation-categorie';
import { ListeSimulationCategorie$Params } from '../fn/simulation-controller/liste-simulation-categorie';
import { listeSimulationUser } from '../fn/simulation-controller/liste-simulation-user';
import { ListeSimulationUser$Params } from '../fn/simulation-controller/liste-simulation-user';
import { mettreAjour } from '../fn/simulation-controller/mettre-ajour';
import { MettreAjour$Params } from '../fn/simulation-controller/mettre-ajour';
import { saveSimulation } from '../fn/simulation-controller/save-simulation';
import { SaveSimulation$Params } from '../fn/simulation-controller/save-simulation';
import { Simulation } from '../models/simulation';
import { SimulationDtoResponse } from '../models/simulation-dto-response';
import { supprimerSimulation } from '../fn/simulation-controller/supprimer-simulation';
import { SupprimerSimulation$Params } from '../fn/simulation-controller/supprimer-simulation';

@Injectable({ providedIn: 'root' })
export class SimulationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `mettreAjour()` */
  static readonly MettreAjourPath = '/api/simulation/mettrejour/{idSimulation}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mettreAjour()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mettreAjour$Response(params: MettreAjour$Params, context?: HttpContext): Observable<StrictHttpResponse<Simulation>> {
    return mettreAjour(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mettreAjour$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  mettreAjour(params: MettreAjour$Params, context?: HttpContext): Observable<Simulation> {
    return this.mettreAjour$Response(params, context).pipe(
      map((r: StrictHttpResponse<Simulation>): Simulation => r.body)
    );
  }

  /** Path part for operation `saveSimulation()` */
  static readonly SaveSimulationPath = '/api/simulation/save/{email}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveSimulation()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveSimulation$Response(params: SaveSimulation$Params, context?: HttpContext): Observable<StrictHttpResponse<Simulation>> {
    return saveSimulation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveSimulation$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveSimulation(params: SaveSimulation$Params, context?: HttpContext): Observable<Simulation> {
    return this.saveSimulation$Response(params, context).pipe(
      map((r: StrictHttpResponse<Simulation>): Simulation => r.body)
    );
  }

  /** Path part for operation `calculerTeg()` */
  static readonly CalculerTegPath = '/api/simulation/calculer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `calculerTeg()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  calculerTeg$Response(params: CalculerTeg$Params, context?: HttpContext): Observable<StrictHttpResponse<SimulationDtoResponse>> {
    return calculerTeg(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `calculerTeg$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  calculerTeg(params: CalculerTeg$Params, context?: HttpContext): Observable<SimulationDtoResponse> {
    return this.calculerTeg$Response(params, context).pipe(
      map((r: StrictHttpResponse<SimulationDtoResponse>): SimulationDtoResponse => r.body)
    );
  }

  /** Path part for operation `listeSimulationUser()` */
  static readonly ListeSimulationUserPath = '/api/simulation/simulationUser/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listeSimulationUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  listeSimulationUser$Response(params: ListeSimulationUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Simulation>>> {
    return listeSimulationUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listeSimulationUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listeSimulationUser(params: ListeSimulationUser$Params, context?: HttpContext): Observable<Array<Simulation>> {
    return this.listeSimulationUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Simulation>>): Array<Simulation> => r.body)
    );
  }

  /** Path part for operation `listeSimulationCategorie()` */
  static readonly ListeSimulationCategoriePath = '/api/simulation/simulationParCategorieId/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listeSimulationCategorie()` instead.
   *
   * This method doesn't expect any request body.
   */
  listeSimulationCategorie$Response(params: ListeSimulationCategorie$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Simulation>>> {
    return listeSimulationCategorie(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listeSimulationCategorie$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listeSimulationCategorie(params: ListeSimulationCategorie$Params, context?: HttpContext): Observable<Array<Simulation>> {
    return this.listeSimulationCategorie$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Simulation>>): Array<Simulation> => r.body)
    );
  }

  /** Path part for operation `supprimerSimulation()` */
  static readonly SupprimerSimulationPath = '/api/simulation/supprimer/{idSimulation}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `supprimerSimulation()` instead.
   *
   * This method doesn't expect any request body.
   */
  supprimerSimulation$Response(params: SupprimerSimulation$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return supprimerSimulation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `supprimerSimulation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  supprimerSimulation(params: SupprimerSimulation$Params, context?: HttpContext): Observable<boolean> {
    return this.supprimerSimulation$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
