/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { creerTauxUsure } from '../fn/taux-usure-controller/creer-taux-usure';
import { CreerTauxUsure$Params } from '../fn/taux-usure-controller/creer-taux-usure';
import { deleteTauxUsure } from '../fn/taux-usure-controller/delete-taux-usure';
import { DeleteTauxUsure$Params } from '../fn/taux-usure-controller/delete-taux-usure';
import { donneeStatistique } from '../fn/taux-usure-controller/donnee-statistique';
import { DonneeStatistique$Params } from '../fn/taux-usure-controller/donnee-statistique';
import { getListeByCategorieId } from '../fn/taux-usure-controller/get-liste-by-categorie-id';
import { GetListeByCategorieId$Params } from '../fn/taux-usure-controller/get-liste-by-categorie-id';
import { historiqueMiseAJour } from '../fn/taux-usure-controller/historique-mise-a-jour';
import { HistoriqueMiseAJour$Params } from '../fn/taux-usure-controller/historique-mise-a-jour';
import { HistoriqueTauxUsure } from '../models/historique-taux-usure';
import { listTauxUsure } from '../fn/taux-usure-controller/list-taux-usure';
import { ListTauxUsure$Params } from '../fn/taux-usure-controller/list-taux-usure';
import { TauxUsure } from '../models/taux-usure';
import { TauxUsureStatistiqueDto } from '../models/taux-usure-statistique-dto';
import { updateTauxUsure } from '../fn/taux-usure-controller/update-taux-usure';
import { UpdateTauxUsure$Params } from '../fn/taux-usure-controller/update-taux-usure';

@Injectable({ providedIn: 'root' })
export class TauxUsureControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateTauxUsure()` */
  static readonly UpdateTauxUsurePath = '/api/tauxUsure/update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTauxUsure()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTauxUsure$Response(params: UpdateTauxUsure$Params, context?: HttpContext): Observable<StrictHttpResponse<TauxUsure>> {
    return updateTauxUsure(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTauxUsure$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTauxUsure(params: UpdateTauxUsure$Params, context?: HttpContext): Observable<TauxUsure> {
    return this.updateTauxUsure$Response(params, context).pipe(
      map((r: StrictHttpResponse<TauxUsure>): TauxUsure => r.body)
    );
  }

  /** Path part for operation `creerTauxUsure()` */
  static readonly CreerTauxUsurePath = '/api/tauxUsure/creer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `creerTauxUsure()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  creerTauxUsure$Response(params: CreerTauxUsure$Params, context?: HttpContext): Observable<StrictHttpResponse<TauxUsure>> {
    return creerTauxUsure(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `creerTauxUsure$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  creerTauxUsure(params: CreerTauxUsure$Params, context?: HttpContext): Observable<TauxUsure> {
    return this.creerTauxUsure$Response(params, context).pipe(
      map((r: StrictHttpResponse<TauxUsure>): TauxUsure => r.body)
    );
  }

  /** Path part for operation `listTauxUsure()` */
  static readonly ListTauxUsurePath = '/api/tauxUsure/listeTaux';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listTauxUsure()` instead.
   *
   * This method doesn't expect any request body.
   */
  listTauxUsure$Response(params?: ListTauxUsure$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TauxUsure>>> {
    return listTauxUsure(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listTauxUsure$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listTauxUsure(params?: ListTauxUsure$Params, context?: HttpContext): Observable<Array<TauxUsure>> {
    return this.listTauxUsure$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TauxUsure>>): Array<TauxUsure> => r.body)
    );
  }

  /** Path part for operation `getListeByCategorieId()` */
  static readonly GetListeByCategorieIdPath = '/api/tauxUsure/listeParCategorie/{idCategorie}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getListeByCategorieId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getListeByCategorieId$Response(params: GetListeByCategorieId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TauxUsure>>> {
    return getListeByCategorieId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getListeByCategorieId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getListeByCategorieId(params: GetListeByCategorieId$Params, context?: HttpContext): Observable<Array<TauxUsure>> {
    return this.getListeByCategorieId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TauxUsure>>): Array<TauxUsure> => r.body)
    );
  }

  /** Path part for operation `historiqueMiseAJour()` */
  static readonly HistoriqueMiseAJourPath = '/api/tauxUsure/historiqueUpdate/{idTauxUsure}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `historiqueMiseAJour()` instead.
   *
   * This method doesn't expect any request body.
   */
  historiqueMiseAJour$Response(params: HistoriqueMiseAJour$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<HistoriqueTauxUsure>>> {
    return historiqueMiseAJour(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `historiqueMiseAJour$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  historiqueMiseAJour(params: HistoriqueMiseAJour$Params, context?: HttpContext): Observable<Array<HistoriqueTauxUsure>> {
    return this.historiqueMiseAJour$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<HistoriqueTauxUsure>>): Array<HistoriqueTauxUsure> => r.body)
    );
  }

  /** Path part for operation `donneeStatistique()` */
  static readonly DonneeStatistiquePath = '/api/tauxUsure/donneStatistique';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `donneeStatistique()` instead.
   *
   * This method doesn't expect any request body.
   */
  donneeStatistique$Response(params?: DonneeStatistique$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
[key: string]: Array<TauxUsureStatistiqueDto>;
};
}>> {
    return donneeStatistique(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `donneeStatistique$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  donneeStatistique(params?: DonneeStatistique$Params, context?: HttpContext): Observable<{
[key: string]: {
[key: string]: Array<TauxUsureStatistiqueDto>;
};
}> {
    return this.donneeStatistique$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
[key: string]: Array<TauxUsureStatistiqueDto>;
};
}>): {
[key: string]: {
[key: string]: Array<TauxUsureStatistiqueDto>;
};
} => r.body)
    );
  }

  /** Path part for operation `deleteTauxUsure()` */
  static readonly DeleteTauxUsurePath = '/api/tauxUsure/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTauxUsure()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTauxUsure$Response(params: DeleteTauxUsure$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return deleteTauxUsure(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTauxUsure$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTauxUsure(params: DeleteTauxUsure$Params, context?: HttpContext): Observable<boolean> {
    return this.deleteTauxUsure$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
