/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CategorieCredit } from '../models/categorie-credit';
import { CategorieDto } from '../models/categorie-dto';
import { champCategorie } from '../fn/categorie-credit-controller/champ-categorie';
import { ChampCategorie$Params } from '../fn/categorie-credit-controller/champ-categorie';
import { createCategorie } from '../fn/categorie-credit-controller/create-categorie';
import { CreateCategorie$Params } from '../fn/categorie-credit-controller/create-categorie';
import { deleteCategorieCredit } from '../fn/categorie-credit-controller/delete-categorie-credit';
import { DeleteCategorieCredit$Params } from '../fn/categorie-credit-controller/delete-categorie-credit';
import { FrAss } from '../models/fr-ass';
import { getAll } from '../fn/categorie-credit-controller/get-all';
import { GetAll$Params } from '../fn/categorie-credit-controller/get-all';
import { getCategorieCredit } from '../fn/categorie-credit-controller/get-categorie-credit';
import { GetCategorieCredit$Params } from '../fn/categorie-credit-controller/get-categorie-credit';
import { updateCategorieCredit } from '../fn/categorie-credit-controller/update-categorie-credit';
import { UpdateCategorieCredit$Params } from '../fn/categorie-credit-controller/update-categorie-credit';

@Injectable({ providedIn: 'root' })
export class CategorieCreditControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateCategorieCredit()` */
  static readonly UpdateCategorieCreditPath = '/api/categorieCredit/update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCategorieCredit()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCategorieCredit$Response(params: UpdateCategorieCredit$Params, context?: HttpContext): Observable<StrictHttpResponse<CategorieCredit>> {
    return updateCategorieCredit(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCategorieCredit$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCategorieCredit(params: UpdateCategorieCredit$Params, context?: HttpContext): Observable<CategorieCredit> {
    return this.updateCategorieCredit$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategorieCredit>): CategorieCredit => r.body)
    );
  }

  /** Path part for operation `createCategorie()` */
  static readonly CreateCategoriePath = '/api/categorieCredit/creer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createCategorie()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCategorie$Response(params: CreateCategorie$Params, context?: HttpContext): Observable<StrictHttpResponse<CategorieCredit>> {
    return createCategorie(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createCategorie$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCategorie(params: CreateCategorie$Params, context?: HttpContext): Observable<CategorieCredit> {
    return this.createCategorie$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategorieCredit>): CategorieCredit => r.body)
    );
  }

  /** Path part for operation `getCategorieCredit()` */
  static readonly GetCategorieCreditPath = '/api/categorieCredit/recuperer/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCategorieCredit()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCategorieCredit$Response(params: GetCategorieCredit$Params, context?: HttpContext): Observable<StrictHttpResponse<CategorieDto>> {
    return getCategorieCredit(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCategorieCredit$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCategorieCredit(params: GetCategorieCredit$Params, context?: HttpContext): Observable<CategorieDto> {
    return this.getCategorieCredit$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategorieDto>): CategorieDto => r.body)
    );
  }

  /** Path part for operation `getAll()` */
  static readonly GetAllPath = '/api/categorieCredit/list';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll$Response(params?: GetAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CategorieCredit>>> {
    return getAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAll(params?: GetAll$Params, context?: HttpContext): Observable<Array<CategorieCredit>> {
    return this.getAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CategorieCredit>>): Array<CategorieCredit> => r.body)
    );
  }

  /** Path part for operation `champCategorie()` */
  static readonly ChampCategoriePath = '/api/categorieCredit/listDesChamp/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `champCategorie()` instead.
   *
   * This method doesn't expect any request body.
   */
  champCategorie$Response(params: ChampCategorie$Params, context?: HttpContext): Observable<StrictHttpResponse<FrAss>> {
    return champCategorie(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `champCategorie$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  champCategorie(params: ChampCategorie$Params, context?: HttpContext): Observable<FrAss> {
    return this.champCategorie$Response(params, context).pipe(
      map((r: StrictHttpResponse<FrAss>): FrAss => r.body)
    );
  }

  /** Path part for operation `deleteCategorieCredit()` */
  static readonly DeleteCategorieCreditPath = '/api/categorieCredit/supprimer/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCategorieCredit()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCategorieCredit$Response(params: DeleteCategorieCredit$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return deleteCategorieCredit(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCategorieCredit$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCategorieCredit(params: DeleteCategorieCredit$Params, context?: HttpContext): Observable<boolean> {
    return this.deleteCategorieCredit$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
